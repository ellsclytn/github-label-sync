{"version":1,"ops":[{"type":1,"author":{"id":"7983c57a07f3649017bcf2203d8b6bd31ee1fa16"},"timestamp":1602315736,"title":"fix: prevent redundant Label edit operations","message":"When a label is edited, the app currently looks at the name (or old name, if it involved a name change) to then query GitHub for all labels matching that name, so it can update them with the new properties. In the event of name changing on the label, this works fine, and the lock table will ensure that GitHub's subequent webhooks won't try to update labels which are already updated.\n\nHowever, in the event that any property that *isn't* the name of a label is edited (color, description), it's possible to end up in a state of recursion. Although the lock table might prevent this a fair bit, the problem is that the surplus webhooks that GitHub generates as a result of us editing labels may come through after the lock is released. When this happens, a new lock is set, we look for labels *only by their name*, and tell every one of them to update, regardless of whether their color and description are already up-to-date. This triggers more webhooks, and the cycle continues.\n\nRelated to: 4f3c592f02a0edf214b6312b4eb4d6467a819310","files":null}]}